# Encoded By : MAHADI HASAN JIHAD
# Encryption : Py3 B64
# Github: https://github.com/Mh-Jihad404
#----------------------------------------------

import base64
exec(base64.b64decode(b''))
